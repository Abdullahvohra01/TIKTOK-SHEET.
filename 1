import Head from 'next/head';
import { NextPage } from 'next';
import { useState, ChangeEvent, useCallback } from 'react';
import * as XLSX from 'xlsx';
import { UploadCloud, FileText, ChevronDown, Download, AlertTriangle, CheckCircle2, Loader2 } from 'lucide-react';

const VohraAICleanerPage: NextPage = () => {
  const [file, setFile] = useState<File | null>(null);
  const [fileName, setFileName] = useState<string | null>(null);
  const [columns, setColumns] = useState<string[]>([]);
  const [selectedColumn, setSelectedColumn] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  const [cleanedData, setCleanedData] = useState<string[]>([]);
  const [currentOffset, setCurrentOffset] = useState<number>(0);
  const [rowLimit, setRowLimit] = useState<number>(100);

  const resetState = () => {
    setFile(null);
    setFileName(null);
    setColumns([]);
    setSelectedColumn(null);
    setError(null);
    setSuccessMessage(null);
    setCleanedData([]);
    setCurrentOffset(0);
    setRowLimit(100);
  };

  const detectHeaders = (worksheet: XLSX.WorkSheet): { headers: string[]; headerRowIndex: number } => {
    const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1:A1');
    const maxRowsToCheck = Math.min(5, range.e.r - range.s.r + 1);

    for (let R = range.s.r; R < range.s.r + maxRowsToCheck; R++) {
      const rowHeaders: string[] = [];
      let nonEmptyCount = 0;
      for (let C = range.s.c; C <= range.e.c; C++) {
        const cellAddress = XLSX.utils.encode_cell({ r: R, c: C });
        const cell = worksheet[cellAddress];
        const val = cell ? String(cell.v).trim() : '';
        if (val !== '') nonEmptyCount++;
        rowHeaders.push(val === '' ? `Column${C + 1}` : val);
      }
      if (nonEmptyCount > 0) {
        return { headers: rowHeaders, headerRowIndex: R };
      }
    }
    const fallbackHeaders: string[] = [];
    for (let C = range.s.c; C <= range.e.c; C++) {
      fallbackHeaders.push(`Column${C + 1}`);
    }
    return { headers: fallbackHeaders, headerRowIndex: range.s.r };
  };

  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    const uploadedFile = event.target.files?.[0];
    if (!uploadedFile) return;

    resetState();
    setFile(uploadedFile);
    setFileName(uploadedFile.name);
    setIsLoading(true);
    setError(null);

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: 'array', cellText: true, cellDates: true });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];

        const { headers } = detectHeaders(worksheet);

        if (headers.length === 0) {
          setError('Could not detect any columns in the file. Please ensure the file has data and headers.');
          setColumns([]);
          setIsLoading(false);
          return;
        }
        setColumns(headers);
        setError(null);
      } catch (err) {
        console.error('File parsing error:', err);
        setError('Error parsing file. Please check the file format and try again.');
        setColumns([]);
      } finally {
        setIsLoading(false);
      }
    };
    reader.readAsArrayBuffer(uploadedFile);
  };

  const prepareCleanedData = useCallback(async (): Promise<string[]> => {
    if (!file || !selectedColumn) return [];

    return new Promise<string[]>((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const data = new Uint8Array(e.target?.result as ArrayBuffer);
          const workbook = XLSX.read(data, { type: 'array', cellText: true, cellDates: true });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];

          const { headers, headerRowIndex } = detectHeaders(worksheet);
          const jsonData: any[][] = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });

          const colIndex = headers.findIndex(h => h === selectedColumn);
          if (colIndex === -1) {
            reject(new Error('Selected column not found in the file.'));
            return;
          }

          const allCleanedData: string[] = [];
          for (let i = headerRowIndex + 1; i < jsonData.length; i++) {
            const row = jsonData[i];
            if (!row) continue;
            let cellValue = row[colIndex] ?? '';
            if (typeof cellValue !== 'string') cellValue = String(cellValue);
            const cleanedValue = cellValue.replace(/@/g, '');
            allCleanedData.push(cleanedValue);
          }
          resolve(allCleanedData);
        } catch (err) {
          reject(err);
        }
      };
      reader.readAsArrayBuffer(file);
    });
  }, [file, selectedColumn]);

  const handleNextBatch = useCallback(async () => {
    if (!file || !selectedColumn || rowLimit <= 0) {
      setError('Please select a file, a column, and enter a valid row limit.');
      return;
    }

    setIsLoading(true);
    setError(null);
    setSuccessMessage(null);

    try {
      let allCleanedData = cleanedData;
      if (allCleanedData.length === 0) {
        allCleanedData = await prepareCleanedData();
        if (allCleanedData.length === 0) {
          setError('No data found in the selected column to clean.');
          setIsLoading(false);
          return;
        }
        setCleanedData(allCleanedData);
      }

      if (currentOffset >= allCleanedData.length) {
        setError('No more rows to download.');
        setIsLoading(false);
        return;
      }

      const batchData = allCleanedData.slice(currentOffset, currentOffset + rowLimit);

      const wsData = [[selectedColumn], ...batchData.map(val => [val])];
      const ws = XLSX.utils.aoa_to_sheet(wsData);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'CleanedData');

      const batchNumber = Math.floor(currentOffset / rowLimit) + 1;
      const fileName = `cleaned_${selectedColumn}_batch_${batchNumber}.xlsx`;

      XLSX.writeFile(wb, fileName);

      setCurrentOffset(currentOffset + rowLimit);
      setSuccessMessage(`Batch ${batchNumber} downloaded (${batchData.length} rows).`);
    } catch (err) {
      console.error('Error during batch download:', err);
      setError('An error occurred while preparing the batch. Please try again.');
    } finally {
      setIsLoading(false);
    }
  }, [file, selectedColumn, rowLimit, currentOffset, cleanedData, prepareCleanedData]);

  return (
    <>
      <Head>
        <title>Vohra AI Batch Cleaner</title>
        <meta name="description" content="Clean specific columns from structured files by removing '@' symbols and download data in batches." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <main className="min-h-screen bg-gray-900 text-gray-100 flex flex-col items-center justify-center p-6">
        <h1 className="text-3xl font-bold mb-6 flex items-center gap-2">
          <FileText size={32} /> Vohra AI Batch Cleaner
        </h1>

        {/* Step 1: Upload File */}
        <section className="w-full max-w-md mb-6">
          <label htmlFor="file-upload" className="flex flex-col items-center justify-center border-2 border-dashed border-gray-600 rounded-lg p-6 cursor-pointer hover:border-blue-500 transition-colors">
            <UploadCloud size={48} className="mb-2 text-blue-400" />
            <span className="text-gray-400">Upload a CSV, XLSX, XLS, or TSV file</span>
            <input
              id="file-upload"
              type="file"
              accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel, .tsv"
              className="hidden"
              onChange={handleFileChange}
              disabled={isLoading}
            />
          </label>
          {fileName && <p className="mt-2 text-center text-sm text-gray-400">Uploaded: {fileName}</p>}
        </section>

        {/* Step 2: Select Column */}
        {columns.length > 0 && (
          <section className="w-full max-w-md mb-6">
            <label htmlFor="column-select" className="block mb-2 font-semibold">
              Which column do you want to clean?
            </label>
            <div className="relative">
              <select
                id="column-select"
                className="w-full appearance-none bg-gray-800 border border-gray-700 rounded-md py-2 pl-3 pr-8 text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={selectedColumn ?? ''}
                onChange={(e) => {
                  setSelectedColumn(e.target.value);
                  setCurrentOffset(0); // reset offset on column change
                  setCleanedData([]); // clear cached data
                  setSuccessMessage(null);
                  setError(null);
                }}
                disabled={isLoading}
              >
                <option value="" disabled>
                  Select a column
                </option>
                {columns.map((col) => (
                  <option key={col} value={col}>
                    {col}
                  </option>
                ))}
              </select>
              <ChevronDown className="absolute right-2 top-2.5 text-gray-400 pointer-events-none" size={20} />
            </div>
          </section>
        )}

        {/* Row limit input and Next button */}
        {selectedColumn && (
          <section className="w-full max-w-md mb-6 flex flex-col sm:flex-row items-center gap-4">
            <div className="flex flex-col flex-grow">
              <label htmlFor="row-limit" className="mb-1 font-semibold">
                Rows per batch
              </label>
              <input
                id="row-limit"
                type="number"
                min={1}
                max={10000}
                value={rowLimit}
                onChange={(e) => {
                  const val = Number(e.target.value);
                  if (val > 0) {
                    setRowLimit(val);
                    setCurrentOffset(0); // reset offset on limit change
                    setCleanedData([]); // clear cached data
                    setSuccessMessage(null);
                    setError(null);
                  }
                }}
                className="bg-gray-800 border border-gray-700 rounded-md py-2 px-3 text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
                disabled={isLoading}
              />
            </div>
            <button
              onClick={handleNextBatch}
              disabled={isLoading}
              className="inline-flex items-center gap-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-semibold py-2 px-4 rounded-md transition-colors"
            >
              {isLoading ? <Loader2 className="animate-spin" size={20} /> : <Download size={20} />}
              Next
            </button>
          </section>
        )}

        {/* Batch info */}
        {selectedColumn && cleanedData.length > 0 && (
          <section className="w-full max-w-md mb-6 text-center text-gray-400">
            <p>
              Downloaded rows: {Math.min(currentOffset, cleanedData.length)} / {cleanedData.length}
            </p>
          </section>
        )}

        {/* Messages */}
        <section className="w-full max-w-md">
          {error && (
            <div className="flex items-center gap-2 bg-red-800 text-red-300 p-3 rounded-md">
              <AlertTriangle size={20} />
              <span>{error}</span>
            </div>
          )}
          {successMessage && (
            <div className="flex items-center gap-2 bg-green-800 text-green-300 p-3 rounded-md">
              <CheckCircle2 size={20} />
              <span>{successMessage}</span>
            </div>
          )}
        </section>

        <footer className="mt-12 text-gray-600 text-sm">
          &copy; {new Date().getFullYear()} Vohra AI
        </footer>
      </main>
    </>
  );
};

export default VohraAICleanerPage;

